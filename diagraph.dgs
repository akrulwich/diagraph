This
  This is 'Diagraph', a diagraph about diagraph.



Diagraph
  A diagraph is a kind of abstract data type. 
  A diagraph is a form of media. 
  A diagraph is a representation a set of possible explanations. 
  A diagraph is a representation of the interface of an explanatory system
    A diagraph represents the interface of an explanation-producing system.
    A diagraph maps a set of requests for explanation to a particular set of explanations.
    A diagraph represents all possible outputs of an explanatory system. 
    A diagraph models only the interface of an explanatory system.
      It ignores the internal implementation.
      It represents only what goes in and what comes out, not what goes on inside.
    A diagraph can model systems that responds to requests for explanation, 
      such as teachers, books, search engines, or libraries.
  A diagraph is an explanation machine.
    It is a representation of the inputs and outputs like any abstract machine.

Types of diagraphic entity
  A diagraph has two kinds of entity, 
    linguistic entities, like subjects, predicates, clauses, sentences, and explanations.
    data structures, like key-value pairs, nodes, and trees.
  The data structures are explicitly represented, and store natural-language text.
  The syntactic entities are implicitly represented, in the natural language text.
  The data structures and their relationships supervene upon the linguistic entities and their relationships.
    There should be no relationship between data structures that doesn't represent a prior relationship between linguistic entities.

The definition of diagraph
  A diagraph is a key-value store, 
      the keys of which are diagraphic paths, which represent requests for explanation.
      the values of which are collections of diagraphic trees, which represent explanations.

Diagraphic keys
  The keys of a diagraph represent things that can be explained.
  There should be a key for every query the explainer could recognize.
  A key of a diagraph is a path prefix to the nodes of the associated tree.
  Every node belongs to one primary key.
  A node may be accessable via multiple keys through aliasing.
  Keys do not represent utterances of the explanation, but rather recognitions which are occasioned by the associated utterance. A diagraphic tree may reiterate its key, like a teacher repeating a question.

Explanations
  An explanation is a thing like an essay, lecture, book, article, answer or story.
  An explanation is a represented in a diagraph by a collection of diagraphic trees.
  An explanation may span several diagraphic trees by crossing over aliases.  
  Explanations have an implicit diagraph, the single tree formed by combining all transmissions.
    Clauses of an explanation have a path relative to the diagraph of the explanation, which may not correspond to the diagraph of the explainer.

Diagraphic tree
  Diagraphic tree roots can be grammatical topics or subjects.
  A diagraphic tree is a tree of diagraphic nodes, which have a string containing one or more space-delimited syntactic elements. 
  A diagraphic tree is at once a graph tree of nodes and a syntax tree of natural language strings. 
  The syntactic structure of a diagraphic tree is represented implicitly the relation between the syntactic elements.
  The pragmatic structure of a diagraphic tree is the grouping of particular syntactic elements together into particular nodes.
  A diagraphic tree is a kind of trie that represents a set of sentences which share a subject. 
  In a diagraphic tree, child nodes represent things that could follow the parent nodes in an explanation.
    Child nodes might for example specify or interpret their parent nodes. 
  Any diagraphic tree could be rendered into one very long sentence. 
    The breaks between particular nodes mirrors the breaks between particular sentences in explanation.
  A diagraphic tree might have a subject element-node, followed by a predicate element-node, followed by conjunction element-nodes, ending in period-terminated element node, a composition node, or an alias.
  A tree does not include aliased subtrees, only nodes primarily stored under the tree's key.
  The tree is the explicit structure stored in memory, not the implicit continous structure formed with aliases. 
  Germanity as constraint on subtrees
  A speaker's sentence changes subject at the point where their tree aliases. 

Diagraphic nodes
  Diagraphic nodes are units of natural language text. 
  Diagraphic nodes contain one or more syntactic elements. 
  Diagraphic nodes represent the meaningfully indivisible units of an explanation.
    A diagraphic node is a single-purpose text. 
    If only part of the node's text is required for a particular purpose, it should be two nodes.
    If a valid explanation could include only part of a node's text, it should be two nodes. 
    If a diagraphic path defines a functional category of information, a node at that path should minimally suffice for that particular function.
    A node should be functionally minimal.
  Where a diagraphic node breaks corresponds to pragmatic sentences in conversation. 
  Children of diagraphic nodes represent things that could follow it in an explanation.
  Requests made to a path will return the entire node or nodes at that path, never portions of a single node.
  Nodes are refactored when a new node is added at a path that enters an existing node.
    Nodes are not refactored merely by adding two nodes with the same prefix to the same path.
  Terminal nodes end with a period.

Syntactic elements
  A diagraphic element is a minimal syntactic element, like a word or phrase.
 
Grammatical topics
  Topics are things like spaces, categories, sets, groups, topics, regions, eras, contexts.
  Children of a topic are members.
  Topics contain subjects.
    In a diagraph, the space that a thing is stored in is its context in that diagraph.
      Every thing in a diagraph is stored primarily in some context, but we do not necessarily give our full private path when explaning something, but rather begin at the subject.
        eg, if I have A/B/C, I might discuss with you .../B/C.
  Some things like countries are topics in one tree and subjects in another. 
  A tree with has a topic-root may have embedded trees with subject-roots.

Grammatical subjects
  Subjects are things like members of a category, things in a space, etc. 
  Children of a subject are predicates.

Grammatical clauses
  A clause is a subject and series of predicates ending in a comma, which may begin with a conjunction.
  A clause-node tree can be automatically parsed, and can be used by some diagraphic functions.
  Diagraphic clauses are only implicitly represented.

Grammatical sentences
  A sentence is a series of clauses ending in a period. 
  Sentences after a terminal clause can form subtrees in a diagraphic tree.
  Diagraphic sentences are only implicitly represented.

Diagraphic element-node tree
  An element-node tree is a kind of diagraphic tree.
  An element-node tree is a diagraphic tree in which every syntactic element has its own diagraphic node.
  In an element-node tree, no two nodes of the same parent should share a prefix. 
  An element node tree has additional tokens like how and why before certain derivations.
  An element node tree can be semantically interpreted, because it can be overlayed onto a generic diagraph.
  An element node tree can be syntactically parsed, because the different syntactic brances are explicitly represented. 

Diagraphic clause-node tree
  An element-node tree is a kind of diagraphic tree.
  An element-node tree is a diagraphic tree in which every syntactic element has its own diagraphic node.
  In an element-node tree, no two nodes of the same parent should share a prefix. 
  A clause-node tree is not generically parsable, but relative precedence of syntactic branches can be discerned. 

Diagraphic paths
  A path is a series of syntactic elements divided into clauses.
  The division of syntactic elements between nodes does not affect path formation.
  A path can be a sole topic or subject.
  A subject has a primary path in a given diagraph, and secondary paths through aliasing.
  A diagraphic URL path would replace commas with forward-slashes.
  A path from a known subject to an unknown subject is the latter's context.
  A public path may not be the same as a private path, which may have a longer antecedent context.
    If a public truncated path is sufficient for an understanding appropriate to some context, it is inappropriate to say that some greater context or the private path used by experts is the correct path, whereas some public path is incorrect. 
      This is the mistake made for example by a graduate student who explains the real numbers as one axis of the range of complex numbers â€“ says who? If the real numbers can be used and described by themselves for the purposes of a particular discussion, then they are their own sufficient context. We might say of complex numbers that they include the real numbers, but we may not say of the real numbers that they belong to the definition of complex numbers. By the time one reaches the age of a professor, one has more modularly refactored one's knowledge, so that each concept can be used and explained individually or in very intentional combinations. The undergraduate, on the other hand, avoids drawing in unneccessary information simply by maintaining a prudent ignorance. 
  EG, T/S/P/P/C/S/P/P/P/C/...
  A speaker might not express what they think of the topic, and the listener might not express why they want to know, both of which would be given by the private path.

Diagraphic addresses
  Diagraphic nodes have addresses in a particular diagraph.
  Diagraphic nodes have one primary and many secondary addresses.
  The primary address is the path from the key where a node is actually stored in a diagraph to that node.
  A secondary address is a path from some other key that advances through aliases.
  Public-language nodes may have a generally agreed upon public-language address. 

Diagraphic references
  A diagraphic reference is a correspondance between a node and a key. 
  Explanations of references or subelements of a clause during an existing explanation are asides.

Diagraphic aliases
  An alias is a correspondance between a path and a key.
  One might refactor a large tree into several smaller trees using aliases. 

Diagraphic composition nodes
  A node of one or more sentences that cannot be meaningfully subdivided.
  A composition-node tree can only be automatically displayed.
  Compositions don't nest.
  Compositions come after a period, and represent a new sentence.
    Compositions to not add to the path. 
  Compositions can be a kind of cached derivation that doesn't require the use of a generic term in a particular clause, and then a subsequent explanation of that term, but rather can proceede by analogy, the example from which the derivation occurs being used to derive directly the property of the particular which one desires to ellicit. The primary storage location of the germ of the derivation is not the tree to which the composition belongs, but this may be the only situation in which it is useful. 
  Compositions can correspond to any part of the tree.

Diagraphic notes, note-nodes
  A note is a special kind of composition which is used to store information temporarily, provisional to its incorperation into a more modular tree.
  One would use a note not because the information contained within is meaningfully single-purpose, but rather because of the accidental organization of the information at its source. 
  A composition that is appropriate whole in one context might need to be broken down into smaller pieces in a different context, and so a composition in one place might become a note in another, provision to refactoring. 
  Diagraphic note piles

Diagraphic priority
  A diagraph has a mode of priority, which is a total ordering of the nodes of that diagraph.
  Diagaphs are hierarchial, and children of a parent have a relative syntactic rank.
    In particular diagraph the order is: 
      'Subject
        Classification (is a)
        Predicate (is)
          Conjunctions (why/so/but/because)
          Adverbal phrases (how)'
    Elements of a type must be ranked by some further criterion.
      In a functional diagraph, priority is relative to function or usefulness in a particular circumstance.
      In a descriptive diagraph, priority might be relative to something like frequency.
      An ideograph is ranked by hierarchy and subsumption.
    Specifications are contingent, so if particular A is parent of particular B, A -/> B. 
    Classifications are high-priority, and so interpretations are often passed off as classifications.
    In generic diagraph, predicate children imply predicate parents.
  "He is the" has priority over "he is a"
  Rank expresses, for example, which of two contributions that were not related would come first in an explanation.
  There cannot be an uncontroversial diagraph prioritization because even if ordering is something unobjectionable like linguistic frequency, there would still be disagreements over which things are classifications and which are interpretations attached to a description by a lower-priorty conjunction.

Particlar diagraph
  Diagraph concerning singular subjects. 
  The roots of particular categories instantiate with reference to a generic. 
    All children of the particular must correspond to generically sanctioned predicates. 
  An explicit representation of a particular diagraph contains an implicit representation of a generic diagraph.

Generic diagraph
  Generic diagraph is a generic subject and all possible predicates. 
  Generic trees begin with "there is" or "there are".
  Generic diagraph is useful in comparing two particular diagraphs, eg determining if predicate A in one diagraph means the same thing as predicate B in another.
  Generic subordination, eg, A/B, means all Bs are A but only some As are B.
  A schema or definition is a configuration of generic diagraph, of the form A/B/C/is a D.
  We represent generic diagraph only when a particular theory exerts complete explanatory power over a domain, and so we don't need any rich particulars, otherwise we explicitly represent particular diagraph & store the generic diagraph implicitly in the predicates of the particular.
  Generic diagraph is composed of generic subjects or concepts. 

Generic clauses
  Generic clauses are things like "Dogs bark"
  Every particular clause is predicated on a generic clause.

Particular derivations
  EG, X is P, why? becuase X is D, so X is E, so X is P.
  Particular derivations must provide a reputable dependent clause from which the given clause follows in generic inferences inherent in the language.

Generic derivations
  A generic derivation is an aside made from a particular explanation.
  A generic derivation begins a discontinous explanation.
  EG, expl(x is p) -> expl(Cs can be p) -> expl(x is p)

Predication
  Every particular clause is predicated upon a generic clause, the abstraction of the particular clause. 
  A predication is an implicit correspondance between a particular predicate and a predicate of the generic type. 
  Predication of a generic address to a particular gives that particular an attribute that represents a state in an underlying generic DFA.

Abstracting a clause
  I genericize a particular clause by finding the path of the generic clause that sanctions the use of the predicate. 
  For example, "Fifi gave birth to twins" -> "Dogs give birth to twins".
  This operation is used in diagraph-consider, and in generic diagraph formation by constantly abstracting from the particular cases we encounter.



Describing diagraphs
  Diagraphs can have depth, if many nodes are the roots of lower trees.
  Diagraphs can have context, if many trees are nodes in higher trees.
  A diagraph can subsume another. 
    One diagraphic tree subsumes another if it contains a node that can be parent to the other's root.
  A diagraph can reduce one diagraph to another.
  A diagraph can be coherant if all paths belong to a single refactored tree.

  A diagraph has a certain number of stages
    The number of conjunctive layers at a particular point.

Diagraph specifications
Functional diagraph specifications
  Functional diagraph specifies the desired information by functional relation to something else.
  A functional diagraph specification is like a question, ie a partial path.
  Diagraphs can be described functionally without complete knowledge of their contents. 
  Functionally specified diagraph allows us to speak precisely about hypothetical diagraphs.
Descriptive diagraph specifications
  A descriptive diagraph specification is like a topic, and therefore is imprecise.
  Descriptive specifications specify the desired information by describing an attribute of that information.
  A descriptive diagraph definition is like, the diagraph formed by a particular corpus of text.

Diagraph merges
  Two diagraphs are merged into one that contains the paths of both diagraphs, refactoring nodes that share prefixes. 

Common configurations of diagraph
  Stories
  Locations

Kinds of diagraphic priority


Interesting diagraphs
Discourse diagraphs
  A discourse diagraph is the hypothetical diagraph implicit in a corpus of text. 
  Responses to particular articulations are culled to produce an abstracted diagraph. 
  Inclusion criteria
    Does it have a wikipedia page?
    Number of secondary sources that make a particular point/use a particular clause.
  Diagraph ranking
    Number of hits on google. 
Pedagogic diagraphs
  Diagraphs that contain every wrong explanation of something, and corrections.
Library diagraphs
  A library diagraph is a diagraph that subsumes various other diagraphs. 
Ideographs
  An ideograph represents the possible explanations of an individual. 
  An ideograph may contain scoped versions of other ideographs for reference. 
  The keys of my ideograph are the words that I recognize. 
Language diagraphs
  A langauge diagraph captures the generic information known to native speakers of a language.
  In a language diagraph, the paths cannot be very deep because of the entropy of ambiguous uses of terms as synonymic. 
    In an ideograph by comparison, there is no entropy across long lines of implicature, because there is no ambiguity about synonymity.
Culture diagraphs
  A culture diagraph represents the particular and generic diagraph common to a cultural group.
  A culture diagraph is the set of references and generics that a member of a group expects another member of the group to know and understand.

Elsinore (criticism of Hamlet)
Descent (a chronology of scientific theories on human development)
Investigations (Wittgensteinâ€™s reduction of analytic philosophy to ordinary language)
Various Libraries
Various Discussions 
Various theories / religions



Describing with diagraph
  What kind of things might be more easy to talk about in terms of diagraph? 
    The differences in explanation preformance between experts and non-experts.
    The ways in which we might compare directly the interfaces of different explanatory systems.
  Tag entropy
  Ephemeral documents and feeds
  An adjacency in a diagraph is a thing that would bring to mind another thing in an explanation.
    So imagine the mind of the person who reads Twitter or the newspaper.
Describing education with diagraph
Describing journalism with diagraph
  How context in a news article might naively seem like aliased subtrees that belong primarily in other places, but really are custom made for the article's tree, children of references in a particular sentence, not a new explanation soley of the reference in its own right. 
Describing libraries with diagraph
Describing academia with diagraph
Capsizing
Describing individuals with diagraph
Describing chronology with diagraph
  Real time, stateful time, evolutionary time
    Being in a DFA, as opposed to being out of one.



Applications of diagraph
  Preventing the redundant duplication of explanatory information in multiple documents. 
    Although, not all duplicated explanatory information is redundant, duplicating the same tree is redundant, but two tree might include the same fact but not the explanation. 
  Preventing information that is similar from becomming fragmented by division into seperate documents
  A diagraph could provide logarithmic-time lookup to a very large corpus of explanatory information.
Diagraph in Education
Diagraph in Journalism
  Explainer journalism â€“Â having one continuous piece of content for the story and the analysis.
  Example of diagraph stages - articles and letters to the editor.
Diagraph in Politics
Diagraph in Library Science
Diagraph in Academic Publishing
Diagraph in personal reading
  Whatever your opinion on what people should read, biases that are failures to trigger a potential interest are inefficiencies.
Diagraph as personal desktop/task manager


Producing diagraph
Writing a diagraph
  Discussion diagraph 
    Produces by consensus
    Every write is changable by both parties. 
    Like writing diagraph-script in a google doc.
    One party may change the paths of the contributions of another party.
    Vulnerable to filibustering.
    Vulnerable to normative description.
      Descriptive clauses should come before specifications and interpretations. By inserting a normative interpretation in the initial declaration, a party may violate that understanding.
    Requires all parties to agree on a shared generic diagraph, 
      in order to decide which inferences are acceptable.
      in order to decide which declarations are descriptive and which are interpretive.
    This method could be used by an organization with dispute resolution procedures, like a newspaper. 
  Debate diagraph
    Every write is submitted by only one party.
    Like a group of people submitting diagraph-script comments to a shared page, everyone can post what they want but no party may alter another party's post.
    No conrtibution may change the path of an existing contribution.
    Diagraph production in which individuals produce a discussion diagraph.
    A party that creates a terminal clause can write a composition, but another party may subdivide that terminal node causing explanation to pass over those compositions.
    Only parties who react to opponent arguments will end up with responsive compositions at every terminal point. 

Diagraph formation
  Tidal sort
    Alternating periods of solicitation to topic-buckets, culling, and subdividing.
    Tidal sort provides continuous improvements.
    Tidal sort requires prior knowledge of high-order clauses.
  Pile sort
    Iterative periods of solicitation to topic buckets, sorting by similarity and subdividing, then more solicitation, until all buckets have fewer than some threshold of notes, then the creation of note piles, which become clause node trees, then element node trees. 
    Pile sort requires a large initial cost.


  
Representations of diagraph
  Diagraph script
    Diagraph script is a text format that represents a diagraph. 
    Diagaph script is the canonical representation of a diagraph. 
      Other data structures merely implement the constructs of diagraph script.
    Lines of a diagraph script file represent nodes of a diagraph.
    Indendation in a diagraph script file represents the hierarchy of a diagraph. 
    Unindented lines of diagraph script represent the diagraphic paths which are the keys of the diagraph.
      The paths may not correspond exactly to the path-keys of the diagraph.
        A diagraph might be more modularly refactored, and the diagraph script intended for a wider audience. 
    Top-level indentations under a key represent the roots of a diagraphic category. 
    Diagraph script is comprised of blocks, section, and parts.
      A block of diagraph script is one atomic write operation.
        Blocks can be seperated by one blank line for clarity.
        Blocks would often begin at the indentation of the previous block. 
        A block of diagraph script might correspond to a prose paragraph.
        A diagraph script block captures a diagraphic root, its context, its specifications, and derivations of the generics used in that tree.
      A section of diagraph script is a set of related blocks. 
        Sections can be seperated by two or three blank lines for clarity. 
        Sections would not usually begin indented. 
        A section of diagraph script might correspond to a prose article or chapter.
      A part is a set of sections that share a topic or theme.
        Parts are seperated by three blank lines.
    Multi-line compositions can be wraped in quotes.

JSON representation of diagraph
  An element-node tree can be a javascript object, because no children of the same node should share a prefix. Otherwise, trees can be represented with string-array tuples.



Diabots
  A diabot is any diagraphic agent. 
  A diabot is an agent that represents its knowledge as a diagraph. 
  A diabot knows N if it has the node N. 
  A diabot understands P if it has the path P. 
  A diabot's ideograph of a particular topic is its understanding of that topic. 



Diagraphic servers

Diagraphic requests
  Requests include a path, function, and optional input diagraph.
  The path serves as prefix for lines of the input diagraph.
Diagraphic responses
  Responses are rendered text.

Diagraphic interfaces
  Document mode
    Server-side generation
    Server-side assembly
  Correspondance mode
    Server-side generation
    Client-side assembly
  Interactive mode
    Client-side generation
    Client-side assembly
    Pages are processes, DOM elements are threads.


Diagraphic functions
  Diagraphic functions have a function body, a satisfaction condition, and a configuration script. 
  Diagraphic functions take a working memory stack of diagraph-script values.
  Diagraphic functions manipulate WM.


Diagraphic function environments
  Input
  Output
  Path
  LTM
    Connects to a data store or API.
  STM
    STM is a cache that associates every value added to WM with its path. 
    A particular trigger of STM is context. 
    A generic trigger of STM is recognition.
    STM recalls can be for generic matches or near matches by generic implicature producing analogies, another example of generic diagraph being useful for comparing different particular diagraphs.
  WM
    Push method
    Enqueue method
    Promote method
    By default caches to STM.
    By default checks STM for value on top of stack and fills in context if there's a match.
    A diagraphic function might use the base of WM to build up some value.
  Call stack
    The call stack represents discrete units of cognition.

Diagraphic function controllers
  The controller runs the diagraphic function's configuration script.
    What the controller does with the path and input depends on the function. 
  Diagraphic function controllers are responsible for 
    taking the provided path and loading the tree into short-term memory, 
    perhaps setting the provided path as the initial item of working memory, 
    before each cycle, checking the function's satisfaction condition, 
    when the function is satisfied, putting new input into working memory,
    piping the instantantaneous values of WM to output as text.

Diagraphic function processes
  A diagraphic process is a continuity of a function with a STM & LTM and root path.
  A diagraphic process handles one or more requests.
  Processes can be represented as continuous closures in the javascript runtime.

Diagraphic function threads
  A diagraphic thread is a continuity of WM between cycles of diagraphic 
  A diagraphic thread handles one request, across multiple cycles.
  A thread of a process might be a branch of the process tree.
  Threads can be represented as messages in the javascript runtime.

Diagraphic function cycles
  Uses a call stack to compute the next state of WM.


Active diagraphic functions
Diagraph-read
  Takes a path and returns the corresponding values. 
Diagraph-edit
  Retrieves the diagraph entry and allows changes.
Diagraph-add
  Merges the input with the existing diagraph entry.
  Takes a diagraph script file and adds it to a diagraph at the specified path. 
    This involves lining up the paths of the file to the keys of the diagraph. 
  When a specified path goes partially into an existing node, the node is refactored.     
    Nodes are not refactored merely by adding two nodes with the same prefix.
Diagraph-interpret
  Takes a public language path and returns the first match it finds in the particular diagraph.  
  Autocomplete is interactive dg-interpret.
Diagraph-explain 
  Takes a path specification in WM. 
  Diagraph-explain traverses the clauses of a tree. For each clause, if there is a element that is not in STM, it pushes it on the stack, otherwise, it states the clause and advances. 
  Dg-explain states the clauses and derives the references.
  Gives compositions of terminal nodes. 
  Explanation truncates the paths to the requested path.
    Ie, if the diagraph has A:B/C, and B is requested, B/C will be sent, not A/B/C.
  The session diagraph is the implicit diagraph formed by all transmissions. 
Diagraph-assess
  Shows the user a diagraphic key, has them produce an explanation in diagraph script, and preforms a comparison to the reference value. 
  Diagraph-assess is a companion function to diagraph-explain.
  An answer is correct if the user-provided predicate is equivalent to the reference predicate in the reference generic diagraph. 
Diagraph-review
  Diagraph-reivew puts whole paths of each node into one WM element.
  Diagraph-Review uses a breadth-first search. 
Diagraph-quiz
  Diagraph-quiz shows the user a node and has them produce a path. 
  Diagraph-quiz is a companion function to diagraph-review.

Passive diagraphic functions
Diagraph-consider
  A hypothetical diagraphic function that preforms a breadth-first search on the generic inferences from a particular node, looking for collisions with existing LTM entries. 
  Consideration takes a fact and looks for particular secondary paths. 
  Consideration takes a fact and uses generic inferences to find candidate implications, marked with questions.
Diagraph-reflect
  A hypothetical diagraphic function that takes an entire diagraphic category and looks for a subsuming interpretation by looking for definitions that fit subsets of nodes.
  Reflection takes a fact and searches the generic diagraph for candidate interpretations.
  Reflection alternatingly describes an entire tree, inviting schemas.
  I keep a full description at the base of WM, and I push selective combinations onto the stack, inviting a STM trigger of a generic path. 

Diagraphic priority queue


Other
Diagraph
  A diagraph is not a document.
    Documents are an insufficiently abstract tool for reasoning about explanatory information 
  A diagraph is not a hypertext.
  Diagraph does not represent embodied discussions.
    Diagraphic responses are of ideas and to ideas, rather than of people or writings to other people or writings. 
    Diagraphs can be formed by culling discussions.
Propsecting
  Provisional compositions can become notes which can become sentences which can become either clause-trees or final compositions.
Qualitative computing
Moderation as merger not mean
The explanation market
  Market fragmentation between producers and consumers. 
Diagraph as epistemic algorithm
Diabots and personal reading
Exhaustive diagraphs, which invite and address every articulation of an idea possible in the language
Diagraphic dynamics
  How agents behave when diagraph transmission is so reliable and ubiquitous as to be inevitable. 
Ostensive diagraph
  A diagraphic node may ostend to a resource referenced by address.
Human assistants for composing diagraph script, eg customer support. 
Diagramatic explanation
  A visual the elements of which correspond to one or more diagraphic trees.
Arguments over competing narratives are arguments over suggested primary ideographic storage
A definition of wrongness that is relative to what one would think given more complete information
How creating a diagraph involves massive redundancy, enumerating for example every concievable way of articulating an idea, so that it is perfectly clear how you suggest the reader integrate it into their understanding.
  How there are no true synonyms in a diagraph, and so every identity between terms must be explicitly represented and justified. 
An explanation of Darwin of infinite length might include an explanation of England of infinite length, but not every fact about England would be germane to that explanation.
Analogies
  Are compositions stored in subtrees analogies? Or are they like in only one respect, whereas an analogy is a direct comparison of likeness? "A is B. C is an example of B." vs. "A is like C"
Intellectual virtue
  Having a reason besides ignorance for choosing where your diagraph will end
How one can infer from the exact relevance of examples and analogies the resolution of one's ideolect.
Moral intuitions as a finite set of innate interpretations that are naturally and generatively triggered by complete description, and so morality as a requirement to solicit the information that would give one's moral intuitions the chance to be triggered. An argument for moral intuitions of greater informational content, rather than a difference in kind. Moral intuitions as judgements, propositional to the degree that any ordinary language.
How can you merge texts? 
  How can we reason about the individual who has read two texts?
Ellaborative encoding, using people's quotes as compositions of particular views.
