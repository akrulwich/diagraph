A Specification of the Diagraphic Format

What is a diagraph?
  A diagraph is a data structure that represents a corpus of explanatory text. 
  A diagraph is a relational sentence-store.

Diagraph Schema:

+----+------+-------+---------+-----------+--------+
| id | Text | Topic | Subject | Prototype | Object |
+----+------+-------+---------+-----------+--------+
|    |      |       |         |           |        |
+----+------+-------+---------+-----------+--------+


Nodes
  A node has a unique text and a set of foreign keys which are references to other nodes.
  A set of nodes can be represented as a self-referencing relational database table.
  The node texts of a finished diagraph are single clause sentences, or clause-nodes.
  Nodes with periods or commas are provisional to single clause nodes. 
  Each node stands alone as a syntactic and semantic unit. 
  Everything in diagraph is a sentence, nothing represents merely a portion of a sentence.
  Larger sentences are built up by combining complete smaller sentences.
  Articulations are when the node text includes additional syntactic structure that is not reflected in the node's references, flowery language perhaps that gets evaluated to a simpler construct which is what the node actually represents.
  A node might have a multi-sentence articulation of an abstract sentece, with foreign keys representing the abstract sentence components.
  A node that contains a derivation is a note, provisional to more modularly refactored clause nodes. 
  Using html markup, a node's text can be, for example, an image.

Components
  The nodes which a node references are its components, or dependencies.
  A node that is a dependency of another is a dependant.
  Components are represented by foreign key references to component nodes.
  The kinds of component are topic, subject, object, and prototype.
  A node may be said to be composed of its components.
  A node is like a recipe and the components are like ingredients. 
  A node is like an image and the components are subimages.
  When a sentence is syntactically embeded in another, its node references the other node by foreign key.
  There are question nodes, like 'Why did Rome fall?', which when embedded in longer sentences become noun-phrases, like 'X fell for all the reasons Rome fell'. The question phrasing is semantically equivalent to the noun-phrase.
  The information stored in the foreign keys should reiterate the information stored in the node text.
  A node's foreign key information should supervene upon the syntactic and semantic information in the node text.
  The decomposition or derivation of a node is a recursive presentation of all its components. 
  The traversal of a node might involve visiting all of its dependants, and their dependants, and so on.

Relations
  A node has foreign keys which can represent its topic, subject, prototype, and object.
  The relationships between components represents the relationships between syntactic elements of a sentence.  
Topic
  A node's topic represents things like situation, surroundings, motivation, cause, logical antecedent, or justification. 
  A node of a topic represents something like an example, answer, illustration, set member, part, consequent, effect, or abductive inference.
  A topic means what something belongs to, or is of.
  A node's contents are nodes which have that node for a topic.
  The node of a noun-phrase like 'Why Rome Fell' might have a question node text, like 'Why did Rome fall?', but these are equivalent, the question is just an articulation of the noun-phrase.
  A node can either have a direct topic, or a node can have an interpretive topic, a node with it for a subject with a particular topic.
  'S is an answer to Q', where Q is not the topic of S, is an example of an interpretation node.
  Making T the topic of S means one cannot concieve of S without prior knowledge of T, eg London & England. 
  Using an interpretation node means that the sentence and the topic can be considered independently.
  Notes can be subordinate to notes which are their topics.
Subject
  A node's subject represents the syntactic subject of a sentence, something like a thing commented on. 
  A node of a subject represents something like a description, response, comment, interpretation, or attribution.
  A subject is what a thing is about.
  A note which has another note for a subject, however, is literally about that note, not about the same thing as the note.
Prototype
  A node's prototype could be a generic sentence of which the particular sentence is an instance.
  A node might be a secondary descriptor for the thing which is its prototype. 
  An articulation might have an abstract idea for a prototype. 
  A discussion in which utterances respond to other utterances might have for prototypes a set of abstract clauses.
  A lesson could be considered a kind of index that uses prototypes to order a set of abstract clauses.
  A prototype would be used to name something by a secondary name. 
  Relative phrases, like 'How X Ys', may have prototypes which are the full sentence, to allow access to the latter without prior knowledge of the full node text. Derivations of the former would fully include the latter.
  A node can either have a direct prototype, or an interpretive prototype, ie a node with it for a subject and a particular prototype.
  An example of an interpretive prototype is 'The morning star is the evening star'.
  An example of a direct prototype is 'Mr. Lincon, ie Abraham Lincoln'.
  If an image node has a direct prototype, we don't say 'That image is this thing' -- we just refer to the image by the name of the thing, producing a merger of the concepts which has a single intension.
  If an image node has an interpretive prototype, we say, 'that is an image of x', ie the two referents have different intensions.
  What is called a concept might refer to a prototype chain of nodes.
  There are three classes of identity between things in diagraph, semantic identity, semantic constructions which are clearly equivalent to any native speaker and which don't recieve seperate nodes (a question and its noun-phrase form), a direct prototype (Mr. Lincoln is Abraham lincoln), and an interpretive prototype (that the Morning star is the Evening star).
Object
  An object is like an argument to the prototype provided in the sentence text.
  Multiple objects, like indirect objects, are the singular objects of multiple nodes nested with subject references.

Derivation
  A derivation is a recursive presentation of the dependencies of a node.
  A diagraph represents derivations explicitly, and explanations implicitly. 
  An article represents explanations explicitly, and derivations implicitly.
  Storing explanations as opposed to derivations overdetermines the arbitrary choices of ordering in a particular explanation.
  Represented derivations implicitly represent all possible topological sorts of that dependency network, ie all possible explanations.
  A diagraph stores derivations and makes explanations to order.
  A prose paragraph is the derivation of the proximate components of a node. 
  A node's full derivation may span many paragraphs.
  Even if a derivation causes a subderivation, we are only ever deriving one node at a time. 

Explanation
  An explanation is a merger of derivations.
  An explanation is any topological sequence of the nodes of a set of related derivations.
  Requested derivations can be added to an ongoing explanation in a queue-like fashion.
  At the end of a derivation, we might offer the derivation of a node of which the previous was a component, ie the derivation of a newly accessable dependant node.

Diagraph script
  Diagraph script is a text format that compiles to a JSON representation of diagraph.
  Each line represents a node text.
  Each node may have four indented children beginning with either 'topic:', 'subject:', 'object:', or 'prototype:'
  A child that begins with, eg, 'topic:' has the parent for a topic.
  Unlabeled lines default to having their parent for a topic.
  The diagraph client allows the user to produce and submit diagraph in this fashion.

Diagraph servers
  A diagraph server responds to requests.
  Requests are made by node text, provided as a slug in the URL.
  The URL format looks like this: host.org/diagraph/?text=value&topic=value&subject=value
  Queries are for one level, and can be iterated on the response data to produce nested queries, topics of topics eg.
  GET requests recieve a flat JSON collection of node objects.
  Node objects have properties for each field of a node's row.
  The response object includes the requested nodes, and all of their dependencies recursively enumerated in the flat response collection. 
  POST requests have a JSON payload and submit a diagraph segment to the server.
  A diagraph server might delegate certain queries to other servers, creating a reference chain.
  A diagraph server might delegate certain submissions to other servers, creating a notification chain.
  A user might have a personal diagraphic server that served as their diagraph agent, soliciting new material from a set of trusted servers.

Diagraph client
  The client has static mode, correspondance mode, and interactive mode. 
  In static mode, the response object is rendered as html text.
  In correspondance mode, the user may make additional queries using a form that get appended to the expanding DOM.
  In interactive mode, only one node is shown at a time, and the user can maneuver with the keyboard or type directly into the display with autocomplete. Return might be a request for a derivation, etc.
  The editing client allows one to submit new diagraph with a post request.
  The client may store session information to avoid redundant presentation of nodes.

Properties of diagraph
  Diagraph would be useful in situations where a corpus of text becomes so large that the index needs an index. 
  In a diagraph, there is no distinction between the index and the content.
  A diagraph would allow logarithmic-time lookup in a corpus of explanatory text without prior knowledge. 
  Diagraph decouples the storage of explanation from the transmission of explanation, allowing more modular and redundant representation than prose.
  A diagraph would be useful for storing a corpus of explanation that is highly interdependent, for example, using a non-standard but internally consistant vocabulary. 
  A diagraph can be said to subsume a corpus of text or another diagraph if it fully contains and indexes it. 
  Diagraphs can be specified functionally, by a particular question or purpose, or descriptively, with respect to a particular corpus. 
  A diagraph can model an explanatory system by representing all possible outputs, explanations, and inputs, requests for explanation.
  The diagraph of all possible explanations of an individual is the ideograph, following the individual's vocabulary, the ideolect.
  A library diagraph is a diagraph that subsumes other avaliable diagraphs.

Diagraph production
  Diagraphs are produces in two general procedures, tidal sort and pile sort. 
  In tidal sort, we create the initial nodes immediately from prior knowledge, and then in stages solicit new notes on those topics, determine the next stage of nodes, and then subdivide the nodes of the general topic into the next set of topic buckets, until we have a finished diagraph.
  In pile sort, we solicit a corpus of notes all at once, then find notes which are on the topic of other notes, create 'piles' by setting one note as the topic of other nodes, and work our way up to a subsuming set of notes, which we then convert to clause-nodes. 
  Diagraphs can be merged, by adding all the nodes of two diagraphs to the same diagraph.
  Diagraphs can be refactored as they grow, so that no node has more dependants than can be easily reviewed in one sitting.
  A diagraph is refactored for example by taking several predicates of a subject and creating one sentence 'X is what X is', and then putting the three clauses as the contents of 'what X is'. 
  One refactors by adding layers of abstraction between a component and a dependant.
  A diagraph is refactored by 'fanning', making lists of dependants into their own trees.
  There can be consensus diagraph production, a group of people might create a diagraph by collaboratively editing a set of nodes.
  There can be adversarial diagraph production, a group of editors able to add but not edit existing nodes.