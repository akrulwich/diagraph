A Specification of the Diagraphic Format

What is a diagraph?
  A diagraph is a data structure that represents a corpus of explanatory text. 
  A diagraph is a relational sentence-store.

Diagraph Schema:

+----+------+-------+---------+--------+-----------+
| id | Text | Topic | Subject | Object | Prototype |
+----+------+-------+---------+--------+-----------+
|    |      |       |         |        |           |
+----+------+-------+---------+--------+-----------+


Nodes
  A node has a unique text and a set of foreign keys which are references to other nodes.
  The node texts of a finished diagraph are clauses. 
  Each node stands alone as a syntactic and semantic unit. A node is one atomic thought.
  I can be presented a node's text if I already have its components.
  Everything in diagraph is a sentence, nothing represents merely a portion of a sentence.
  Larger sentences are built up by combining complete smaller sentences.
  If a node contains a multi-sentence articulation of an abstract sentece, the foreign keys represent the abstract sentence.
  A node that contains a derivation is a note, provisional to more modularly refactored clause nodes. 
  Notes can be subordinate to notes which are their topics.
  A note which has another note for a subject, however, is literally about that note, not about the same thing as the note.
  Nodes with periods or commas are provisional to single clause nodes. 

Components
  The nodes which a node references are its components, or dependencies.
  The kinds of component are topic, subject, object, and prototype.
  A node may be said to be composed of its components.
  A node is like a recipe and the components are like ingredients. 
  A node is like an image and the components are subimages.
  When a sentence is syntactically embeded in another, its node references the other node by foreign key.
  The information stored in the foreign keys should reiterate the information stored in the node text.
  A node's components are its references, and their references, and their references, etc.
  The decomposition of a node is a recursive presentation of all its components. 
  The dependants of a node are the nodes which have that node for a component.

Relations
  A node has foreign keys which can represent its topic, subject, prototype, and object.
  The relationships between components represents the relationships between syntactic elements of a sentence.  
Topic
  A node's topic represents things like situation, surroundings, motivation, cause, logical antecedent, or justification. 
  A node of a topic represents something like an example, illustration, set member, consequent, effect, or abductive inference.
  A logical antecedent is coincident a consequent in the same way being in a room brings to mind possible access of the things in that room.
  Question-topics contain answers.
  A node either primarily belongs to a topic, or a node has an interpretation which joins it to a particular topic.
  'S is an answer to Q', where Q is not the topic of S, is an example of an interpretation node.
  Making T the topic of S means one cannot concieve of S without prior knowledge of T, eg London & England. 
  Using an interpretation node means that the sentence and the topic can be considered independently.
Subject
  A node's subject represents the syntactic subject of a sentence, something like a thing commented on. 
  A node of a subject represents something like a description, response, comment, interpretation, or attribution.
Object
  An object is like an argument to the prototype provided in the sentence text.
  Multiple objects are the singular objects of multiple nodes nested with subject references.
Prototype
  A node's prototype could be a generic sentence of which the particular sentence is an instance.
  A node might be a secondary descriptor for the thing which is its prototype. 
  An articulation might have an abstract idea for a prototype. 
  A discussion in which utterances respond to other utterances might have for prototypes a set of abstract clauses.
  A lesson could be considered a kind of index that uses prototypes to order a set of abstract clauses.
  A prototype would be used to name something by a secondary name. 
  I might use a relative phrase, 'How X Ys', and have its prototype be a full sentence, to allow access to the latter without prior knowledge of the full node text. Derivations of the former would fully include the latter.

Derivation
  A derivation is a recursive presentation of the dependencies of a node.
  A diagraph represents derivations explicitly, and explanations implicitly. 
  An article represents explanations explicitly, and derivations implicitly.
  A diagraph stores derivations and makes explanations to order.
  A prose paragraph is the derivation of the proximate components of a node. 
  A node's full derivation may span many paragraphs.
  Even if a derivation causes a subderivation, we are only ever deriving one node at a time. 

Explanation
  An explanation is a merger of derivations.
  An explanation is any topological sequence of the nodes of a set of related derivations.
  Requested derivations can be added to an ongoing explanation in a queue-like fashion.
  At the end of a derivation, we might offer the derivation of a node of which the previous was a component, ie the derivation of a newly accessable dependant node.

Diagraph script
  Diagraph script is a text format that compiles to a JSON representation of diagraph.
  Each line represents a node text.
  Each node may have four indented children beginning with either 'topic:', 'subject:', 'object:', or 'prototype:'
  Unlabeled lines produce nodes with topic set to the parent of the current indentation. 
  The diagraph client allows the user to produce and submit diagraph in this fashion.

Diagraph servers
  A diagraph server responds to requests.
  Requests are made by node text, provided as a slug in the URL.
  The URL format looks like this: host.org/diagraph/?text=value&topic=value&subject=value
  GET requests recieve a flat JSON object.
  The response object has node-text for keys.
  The response object has node objects for values.
  Node objects have topic, subject, object and prototype keys, with values that are the node-text of the referenced node. 
  The references of the node object can be resolved with a lookup on the response object.
  The response object includes the requested nodes, and all of their dependencies. 

Diagraph client
  The client has static mode, correspondance mode, and interactive mode. 
  In static mode, the response object is rendered as html text.
  In correspondance mode, the user may make additional queries using a form that get appended to the expanding DOM.
  In interactive mode, only one node is shown at a time, and the user can maneuver with the keyboard or type directly into the display with autocomplete.
  The editing client allows one to submit new diagraph with a post request.
  The client may store session information to avoid redundant presentation of nodes.

Properties of diagraph
  Diagraph would be useful in situations where a corpus of text becomes so large that the index needs an index. 
  In a diagraph, there is no distinction between the index and the content.
  A diagraph would allow logarithmic-time lookup in a corpus of explanatory text without prior knowledge. 
  Diagraph decouples the storage of explanation from the transmission of explanation, allowing more modular and redundant representation than prose.
  A diagraph would be useful for storing a corpus of explanation that is highly interdependent, for example, using a non-standard but internally consistant vocabulary. 
  A diagraph can be said to subsume a corpus of text or another diagraph if it fully contains and indexes it. 
  Diagraphs can be specified functionally, by a particular question or purpose, or descriptively, with respect to a particular corpus. 
  A diagraph can model an explanatory system by representing all possible outputs, explanations, and inputs, requests for explanation.
  The diagraph of all possible explanations of an individual is the ideograph, following the individual's vocabulary, the ideolect.
  A library diagraph is a diagraph that subsumes other avaliable diagraphs.

Diagraph production
  Diagraphs are produces in two general procedures, tidal sort and pile sort. 
  In tidal sort, we create final nodes immediately, and then in stages solicit new notes, determine the next stage of nodes, and then subdivide the nodes of the general topic into the next set of categories. This is a top-down process.
  In pile sort, we solicit a body of information all at once, then find notes which are on the topic of other notes, create 'piles', and work our way up to a subsuming set of simple nodes. 
  Diagraphs can be merged.
  There can be consensus diagraph production, a group of people might create a diagraph by collaboratively editing a set of nodes.
  There can be adversarial diagraph production, a group of editors able to add but not edit existing nodes.

