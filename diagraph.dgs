A Specification of the Diagraphic Format

What is a diagraph?
  A diagraph is a data structure that represents a corpus of explanatory text. 
  A diagraph is a relational sentence-store.

Diagraph Schema:

+----+------+-------+---------+--------+-----------+
| id | Text | Topic | Subject | Object | Prototype |
+----+------+-------+---------+--------+-----------+
|    |      |       |         |        |           |
+----+------+-------+---------+--------+-----------+


Nodes
  A node has a unique text and a set of foreign keys which reference other nodes.
  The nodes of a finished diagraph are sentences. 
  Each node stands alone as a syntactic and semantic unit, although a node prerequires its components.
  Everything in diagraph is a sentence, nothing represents a part of a sentence.
  A node with multiple sentences might implicitly represents an abstract sentece, represented by the foreign keys.
  A node with many sentences is a note, provisional to several modularly refactored nodes. 
  Notes can be responses to their topic notes.
  Nodes with periods or commas are provisional to single clause nodes. 

Components
  The nodes which a node references are its components, or dependencies.
  The kinds of component are topic, subject, object, and prototype.
  A node may be said to be composed of its components.
  A node is like a recipe and the components are like ingredients. 
  A node is like an image and the components are subimages.
  When a sentence is syntactically embeded in another, the node references the other by foreign key.
  The information stored in the foreign keys should reiterate the information stored in the node text.
  A node's components are its references, and their references, and their references, etc.
  The decomposition of a node is a recursive presentation of its components. 
  The traversal of a node visits all nodes that have the node for a component. 

Relations
  A node has foreign keys which can represent its topic, subject, prototype, and object.
  The relationships between components represents the relationships between syntactic elements of a sentence.  
Topic
  A node's topic represents things like situation, surroundings, motivation, cause, or logical antecedent. 
  A node of a topic represents something like an example, illustration, set member, consequent, effect, or abductive inference.
Subject
  A node's subject represents the syntactic subject of a sentence, something like a thing commented on. 
  A node of a subject represents something like a description, response, comment, interpretation, or attribution.
Object
  An object is like an argument to the prototype provided in the sentence text.
  Multiple objects are the singular objects of multiple nodes nested with subject references.
Prototype
  A node's prototype could be a generic sentence of which the particular sentence is an instance.
  A node might be a secondary descriptor for the thing which is its prototype. 
  An articulation might have an abstract idea for a prototype. 

Derivation
  A derivation is a recursive presentation of the dependencies of a node.
  A diagraph represents derivations explicitly, and explanations implicitly. 
  An article represents explanations explicitly, and derivations implicitly.
  A diagraph stores derivations and makes explanations to order.
  A prose paragraph is the derivation of the proximate components of a node. 
  A node's full derivation may span many paragraphs.

Explanation
  An explanation is a derivation-merge.
  An explanation is a set of related derivations which may be overlapping. 
  An explanation is any topological traversal of the components of a set of nodes.
  An explanation is a continuous set of derivations.
  Requested derivations can be added to an ongoing explanation in a queue-like fashion.
  At the end of a derivation, we might offer another derivation of which the previous was a component.

Diagraph script
  Diagraph script is a text format that represents a diagraph.
  Lines represent nodes, and hierarchy & syntax represents relations.
  Diagraph script allows us to define many nodes at once by specifying a shared topic or subject only once.
  Diagraph script lines with no periods or colons are topics.
  Diagraph script lines with colons are subjects.
  Diagraph script lines which contain periods are notes.
  Notes which have other indented notes are topics to them.
  Prototype and object information are not represented.
  Derivations are more complete, but one node at a time, whereas diagraph script provides a hierachial view that is open-ended in one dimension.
  Notes contain whole derivations so that they can be seen from the hierarchial view. 

Diagraph servers
  A diagraph server responds to requests.
  Requests are made by node text, provided as a slug in the URL.
  The URL format looks like this: host.org/diagraph/sentence 
  GET requests are for a nested JSON node decomposition.
  Requests are only ever for one decomposition at a time.
  The server provides a decomposition of the sentence as a JSON object with node-text keys, and node-object values, with foreign keys replaced by the node text of the referenced component, which can be found in the object-proper under the node-text key.
  Responses should not depend on the state of a particular user or session.
  POST requests have a diagraph script payload. If the file contains nodes that are not in the diagraph, they are added. If the file lacks nodes which are in the diagraph, the response augments the request payload with the additional nodes & sends it back. So the same procedure is used for adding nodes as requesting nodes. 

Diagraph client
  The reading client would make a series of requests for derivations and offer them to the reader as a continuous growing explanation.
  The editing interface lets me create new nodes with reference to existing ones.
  I can select a set of nodes to consult by specifying, eg, a topic or subject. The client makes a POST request for the traversals of the nodes of a diagraph script list, and returns the results as an augmented list -- perhaps with a query string depth parameter.
  The reading client could make several requests for individual node decompositions and merge the JSON produced into a kind of narrative topological sort before presenting them. 
  The client may store session information to avoid redundant presentation of nodes.

Diagraph production
  Diagraphs are produces in two general procedures, tidal sort and pile sort. 
  In tidal sort, we create final nodes immediately, and then in stages solicit new notes, determine the next stage of nodes, and then subdivide the nodes of the general topic into the next set of categories. This is a top-down process.
  In pile sort, we solicit a body of information all at once, then find notes which are on the topic of other notes, create 'piles', and work our way up to a subsuming set of simple nodes. 

