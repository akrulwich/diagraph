This is an introduction to the diagraphic format. 


What is a diagraph?
  A diagraph is a data structure that represents a corpus of explanatory text. 
  A diagraph is a relational sentence-store.


Diagraph Schema:

+----+------+-------+---------+-----------+--------+
| id | Text | Topic | Subject | Prototype | Object |
+----+------+-------+---------+-----------+--------+
|    |      |       |         |           |        |
+----+------+-------+---------+-----------+--------+


The nodes of a finished diagraph are sentences. 
A node's text represents a minimal unit of explanation.
Nodes may include other nodes. A sentence may syntactically embed another, and a node references its components by foreign key.
A node's components are its references, and their references, and their references, etc.
A node's text cumulatively represents all of its components. 
Each node stands alone as a syntactic and semantic unit. 




The component relations:
The relationships between components represents the relationships between words.
What does topic represent? 
  situation, surroundings, motivation
  examples, illustrations, members, demonstrations
What does subject represent?
  the syntactic subject
  reponses, comments
What does antecedent represent?
  cause, reason, explanation, justification, evidence
  effects, consequents, consequences, progeny
What does prototype represent? 
  Kind, abstracts, ideas 
  Instances, articulations




Configurations of diagraph 
-subject embedding
-topic nesting
-example of node with subject & prototype
-how prototypes have typical contents and descriptions
-how there can be overlap between a node's contents & its descriptions.
--The existance of a no-text node with particular foreign keys, eg subject & prototype, has a particular meaning.
-example of adding something to the I/This topic to publish it
  -the difference between what is true of X and what is true of me, vis what I think of X, & that in diagraph they can be different.
-dialog, utterance nodes where the subject is other utterance nodes
-indexing facts with text topics, like legal codes.
-stories
-locations
-what we might call the reciprocal names of the different foreign keys (eg examples/interpretations/etc)
-notes, ie multi-sentence nodes that are not published to the I/This identity topic. 
-how chronology is a kind of secondary index of a set of platonic facts about things.
-napoleon and louisiana
-I know [P] because [evidence] -- a subject/antecedent pair can represent epistemic justification
-Using two nested arguments to create an indirect object 
-Question topics which contain illustrations, question subjects with responses which are answers.
-diagraphic merges, & discussion 
-How putting S in T is literal, but creating S about S in T is interpretational.
-Putting S literally in T means you can't know S without T. Putting T as an interpretation of S means they can be known seperately.
-There can be question nodes. A question node is illustrated by its contents, and answered by its responses. 
- A node that has a single sentence is in a kind of resting state. More than that & its a clipping, less and its a fragment/note.





Applications of diagraph / Describing things as diagraphs
-The nodes of a diagraph represent the units of an explanation, ways in which two explanations could differ on an informational basis, sentences which could meaningfully stand alone.
-tag entropy
-Modeling wikipedia as diagraph
  -a reference is entropic if it does not soley belong to the prior resource, meaning it must be relevant for multiple contexts. Explanations are generally combinatorially specific.
-capsizing, when the index needs an index
-The problem with prose 
  (& serialization attempts like the dewey decimal system)
-Describing the discourse diagraph implicit in a corpus
-Describing libraries as diagraph
  -A library in which the indexes were continuous with the content.
-Modeling academia with diagraph
-modeling jouranlism as diagraph
--eg the snowden story, which is still developing, ie long-term unfurling cause & effect relationships
-describing ephemeral media as utterances prototyping the same abstract sentences.







Diagraph script
  Diagraph script represents sentences with explicit relations to other sentences.

  S
    Relation: 
      S
    Relation:
      S





Diagraph servers

  host.org/diagraph/sentence (?N=2) -- returns all adjacencies within N

  host.org/diagraph/sentence/how    (nodes where topic = s)
  host.org/diagraph/sentence/why    (T of nodes where subject = s)
  host.org/diagraph/sentence/so     (S of nodes where T = s)
  host.org/diagraph/sentence/which  (P of nodes where subject = s)

  Query string N argument - can request max, & receive less if refused.
  Get for read, post for edit
  Returns nested JSON.





Diagraphic interfaces
  The interactive interface
    The interactive interface permits search and browse.
    The interactive interface displays text sentence by sentence like a slide-deck.
    The interactive interface builds a local session store that can be flexibly searched.

    Visit S:
    -display S
    -visit sentences about s
    -visit sentences of topic s

    Each visitation is on a stack, more pushes to the stack, next advances the current item, continue pops the stack.
    Down - more
    Left - next
    Return - continue


    The URL fragment represents additional client-side query information.

  The correspondance interface
    Each click returns a JSON request which is appended to the DOM, creating a chronological sequence.

  The static interface
    Simply displays all sentences of the payload with hyperlinks to their sentences pages.







Producing diagraph
-what does a diagraph look like through every provisional stage of pile sort/tidal sort






