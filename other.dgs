Diagraphic element-nodes
        Correspond to words

        An element-node tree is a kind of diagraphic tree.
        An element-node tree is a diagraphic tree in which every syntactic element has its own diagraphic node.
        In an element-node tree, no two nodes of the same parent should share a prefix. 
        An element node tree has additional tokens like how and why before certain derivations.
        An element node tree can be semantically interpreted, because it can be overlayed onto a generic diagraph.
        An element node tree can be syntactically parsed, because the different syntactic brances are explicitly represented. 

      Diagraphic clause-nodes
        Correspond to clauses

        An element-node tree is a kind of diagraphic tree.
        An element-node tree is a diagraphic tree in which every syntactic element has its own diagraphic node.
        In an element-node tree, no two nodes of the same parent should share a prefix. 
        A clause-node tree is not generically parsable, but relative precedence of syntactic branches can be discerned. 

      Diagraphic composition nodes
        A node of one or more clauses that cannot be meaningfully subdivided.
        A composition-node tree can only be automatically displayed.
        Compositions don't nest.
        Compositions come after a period, and represent a new sentence.
          Compositions to not add to the path. 
        Compositions can be a kind of cached derivation that doesn't require the use of a generic term in a particular clause, and then a subsequent explanation of that term, but rather can proceede by analogy, the example from which the derivation occurs being used to derive directly the property of the particular which one desires to ellicit. The primary storage location of the germ of the derivation is not the tree to which the composition belongs, but this may be the only situation in which it is useful. 
        Compositions can correspond to any part of the tree.

      Diagraphic notes
        A note is a special kind of composition which is used to store information temporarily, provisional to its incorperation into a more modular tree.
        One would use a note not because the information contained within is meaningfully single-purpose, but rather because of the accidental organization of the information at its source. 
        A composition that is appropriate whole in one context might need to be broken down into smaller pieces in a different context, and so a composition in one place might become a note in another, provision to refactoring. 
        Diagraphic note piles






        Particular derivations
  EG, X is P, why? becuase X is D, so X is E, so X is P.
  Particular derivations must provide a reputable dependent clause from which the given clause follows in generic inferences inherent in the language.

Generic derivations
  A generic derivation is an aside made from a particular explanation.
  A generic derivation begins a discontinous explanation.
  EG, expl(x is p) -> expl(Cs can be p) -> expl(x is p)
  A generic derivation is a specification of some generic paths to the exclusion of others - it is a pruning of the generic tree.











  Initialization
  On initialization a diagraphic server will set and interval that will introduce the identity process every so often. Active processes will schedule their successors after 0t, passive processes after 1t, and the identity process every 2t. 
Diagraphic requests
  Requests include a path, function, and optional input diagraph.
  The path serves as prefix for lines of the input diagraph.
  A diagraphic request gets one process and multiple threads of multiple cycles.
  Diagraphic requests are like sensory input, something that draws attention.
  Diagraphic requests can be handled synchronously if they are urgent, or asynchronously.
Diagraphic responses
  Responses are text representing.

Diagraphic interfaces
  Document mode
    Document mode is like reading an expert's book. 
    Server-side generation
    Server-side assembly
  Correspondance mode
    Correspondance mode is like sending an expert an email.
    Server-side generation
    Client-side assembly
    Pages are processes, DOM elements are threads.
  Interactive mode
    Interactive mode is like speaking with an expert extemporaneously.
    Every way in which a person can signal to an explainer what they want should have a corresponding UI interaction -- ie backchannels
    A user can change the WM value of a running thread by editing the DOM.
    Client-side generation
    Client-side assembly

Diagraphic functions
  Diagraphic functions have a function body, a satisfaction condition, and a configuration script. 
  Diagraphic functions take a working memory stack of diagraph-script values.
  Diagraphic functions manipulate WM.

Diagraphic function environments
  A diagraphic function environment is a bundle of resources provided to each diagraphic process.
  The environment communicates with the function through the resources.
  LTM-Topic
    The LTM-topic is a small diagraph with one topic key, and the topic keys of any aliases.
  STM
    STM is a cache that associates every value added to WM with its path.
    A particular trigger of STM is context. 
    A generic trigger of STM is recognition.
    STM recalls can be for generic matches or near matches by generic implicature producing analogies, another example of generic diagraph being useful for comparing different particular diagraphs.
  WM
    A string/sentence up to seven phonemes long.
    WM.set pipes to output
  Input
    A stream of diagraph script. The process puts a listener on new input. 
    Redundant inputs should be idempotent, & increase reliability.
  Output
    This may just be WM.set
  Wait
    A flag that causes the current thread to stall.

Diagraphic function controllers
  A diagraphic function cycle is one execution of a diagraphic function controller.
  The diagraphic function controller takes input, output, path, LTM, STM, and WM.
  Every diagraphic message/cycle is a call to the controller bound to a particular set of arguments.
  Passive diagraphic processes call the controller and incoming requests call the controller.
  The diagraphic function controller executes until input and WM are empty.
  The satisfaction condition of all functions might just be empty WM.
  The controller runs the diagraphic function's configuration script.
    What the controller does with the path and input depends on the function. 
  Diagraphic function controllers are responsible for 
    taking the provided path and loading the tree into short-term memory, 
    perhaps setting the provided path as the initial item of working memory, 
    before each cycle, checking the function's satisfaction condition, 
    when the function is satisfied, putting new input into working memory,
    piping the instantantaneous values of WM to output as text.

Diagraphic function processes
  A process is a listener on input with access to a ltm-topic and a stm cache.
  A diabot only can access a LTM topic through a running process.
    And so the diabot is one for whom data and a running program are not seperable, because the process is how the diabot recalls the data.
  A diagraphic server must 'run' a topic as a process in order to access the data, and thereby changes the data, so there is no distinction between retrival and execution, data and program instruciton. 
  To represent one story is to be prepared to correct misrepresentations of it. 

  A diagraphic process is a continuity of a function with a STM & LTM and root path.
  Processes, not threads, have satisfaction conditions. Threads just have empty WM. A process will respawn threads over and over again until it reaches a satisfaction condition, like a path between two nodes.
  A diagraphic process handles one or more requests, function-path-input combinations.
  The functional specification of the diagraphic request is the satisfaction condition of the diagraphic process.
  A diagraphic process spawns a diagraphic thread with an initial WM. Then that thread cycles and schedules a cycle and schedules a cycle until it empties WM. 
  A fault-tolerant process spawns threads deterministically. 
  A fault-tolerant diagraphic process doesn't rely on threads being able to reliably schedule subsequent threads, but instead guarentees that until the satisfaction condition is reached, every thread that is generated will eventually be regenerated and so the continuity of any particular thread is unimportant.
  Even better are threads that save to LTM on every cycle.
  When we are counting on a thread iterating to completion because we cannot respawn it, as with a STM-hit, we are suddenly WM-reliant and an unclean shutdown could drop the thread perminantly.
  Lost threads can only be found by a lucky STM-hit, guessing a generic nearby.
  A fault-tolerant diagraphic process might pipe its output to input in order to check that all threads have cleanly shutdown.
  A diagraphic function process is like a diagraph script section.
  A diagraphic function process is like a webpage.
  Processes can be represented as a closure in the javascript runtime.

Diagraphic function threads, Diagraphic threads
  A diagraphic thread is a user of the process resources, with a WM value.

  A diagraphic thread is a chained series of diagraphic function cycles.
  A diagraphic thread is represented by a closure, function, and state of WM.
  A diagraphic thread is a continuity of WM between cycles of diagraphic function.
  A diagraphic thread that empties WM has had a clean shutdown.
  A thread is stable if it will be generated again later by the process and state of LTM.
  A stable thread is a deterministic result of the process, function, and state of LTM.
  For a thread to be fault-tolerant  means that the thread could be lost and no data would be lost.
  A diagraphic thread handles one request, across multiple cycles.
  The most fault-tolerant threads are short threads which save to LTM on every cycle, and finish quickly.
  Threads that are regenerable by the process, like having a book-mark, are reasonably fault-tolerant. 
  A thread of a process might be a branch of the process tree.
  A trhead is captured by anything that can be used to regenerate the state of the WM stack.
  A thread might persist for a while with a provisional path, and terminate once it finds a LTM address.
  A diagraphic function process is like a diagraph script block.
  A diagraphic function thread is like a paragraph of an essay.
  Ledgering involves flipping between developing threads of a process.
  Flipping between threads of a process is like flipping between paragraphs of an essay.
  A thread is like a sentence that schedules another sentence that schedules another sentence and you end up with a paragraph in WM that you write to LTM and then terminate.
  Once a thread has stored its base entry to working memory, it empties and terminates.
  A thread can be represented as a continuous series of javascript messages scheduling other messages. 

Diagraphic function cycles
  Uses a call stack to compute the next state of WM.
  A diagraphic function thread is like a sentence.
  A diagraphic function process is like a diagraph script line.
  Each cycle can be represented as a javascript message.

Diagraph-read
  Takes a topic and returns the corresponding subjects.
  Doesn't take any input subject.
Diagraph-edit
  Retrieves the diagraph entry and allows changes.
Diagraph-add
  Merges the input with the existing diagraph entry.
  Takes a diagraph script file and adds it to a diagraph at the specified path. 
    This involves lining up the paths of the file to the keys of the diagraph. 
  When a specified path goes partially into an existing node, the node is refactored.     
    Nodes are not refactored merely by adding two nodes with the same prefix.
Diagraph-interpret
  Takes a public language path and returns the first match it finds in the particular diagraph.  
  Autocomplete is interactive dg-interpret.
Diagraph-explain 
  Dg-Explain takes a topic and input subjects.

  Takes a path specification in WM. 
  The lines of input are like asking how x, "given Y".
  Diagraph-explain traverses the clauses of a tree. For each clause, if there is a element that is not in STM, it pushes it on the stack, otherwise, it states the clause and advances. 
  Dg-explain states the clauses and derives the references.
  Gives compositions of terminal nodes. 
  Explanation truncates the paths to the requested path.
    Ie, if the diagraph has A:B/C, and B is requested, B/C will be sent, not A/B/C.
  The session diagraph is the implicit diagraph formed by all transmissions. 
Diagraph-assess

  Shows the user a diagraphic key, has them produce an explanation in diagraph script, and preforms a comparison to the reference value. 
  Diagraph-assess is a companion function to diagraph-explain.
  An answer is correct if the user-provided predicate is equivalent to the reference predicate in the reference generic diagraph. 
Diagraph-review

  Diagraph-reivew puts whole paths of each node into one WM element.
  Diagraph-Review uses a breadth-first search. 
Diagraph-quiz

  Diagraph-quiz shows the user a node and has them produce a path. 
  Diagraph-quiz is a companion function to diagraph-review.

Diagraph-consider
  A hypothetical diagraphic function that preforms a breadth-first search on the generic inferences from a particular node, looking for collisions with existing LTM entries. 
  Consideration takes a fact and looks for particular secondary paths. 
  Consideration takes a fact and uses generic inferences to find candidate implications, marked with questions.
Diagraph-reflect
  A hypothetical diagraphic function that takes an entire diagraphic category and looks for a subsuming interpretation by looking for definitions that fit subsets of nodes.
  Reflection takes a fact and searches the generic diagraph for candidate interpretations.
  Reflection alternatingly describes an entire tree, inviting schemas.
  I keep a full description at the base of WM, and I push selective combinations onto the stack, inviting a STM trigger of a generic path. 

Diagraphic priority queue
  In order to select a passive process, perhaps the diagraphic function environment does a BFS on the identity tree, looking for hits in STM, and then creates a new process and thread.

Background processes

  There is one passive process, the identity process, and many passive threads.
  Passive threads schedule their successors after a pause, so that active threads that use setInterval(0) will be able to cut in front of them.




Propsecting
  Provisional compositions can become notes which can become sentences which can become either clause-trees or final compositions.
Qualitative computing
Moderation as merger not mean
The explanation market
  Market fragmentation between producers and consumers. 
Diagraph as epistemic algorithm
Diabots and personal reading
Exhaustive diagraphs, which invite and address every articulation of an idea possible in the language
Diagraphic dynamics
  How agents behave when diagraph transmission is so reliable and ubiquitous as to be inevitable. 
Ostensive diagraph
  A diagraphic node may ostend to a resource referenced by address.
Human assistants for composing diagraph script, eg customer support. 
Diagramatic explanation
  A visual the elements of which correspond to one or more diagraphic trees.
Arguments over competing narratives are arguments over suggested primary ideographic storage
A definition of wrongness that is relative to what one would think given more complete information
How creating a diagraph involves massive redundancy, enumerating for example every concievable way of articulating an idea, so that it is perfectly clear how you suggest the reader integrate it into their understanding.
  How there are no true synonyms in a diagraph, and so every identity between terms must be explicitly represented and justified. 
An explanation of Darwin of infinite length might include an explanation of England of infinite length, but not every fact about England would be germane to that explanation.
Analogies
  Are compositions stored in subtrees analogies? Or are they like in only one respect, whereas an analogy is a direct comparison of likeness? "A is B. C is an example of B." vs. "A is like C"
Intellectual virtue
  Having a reason besides ignorance for choosing where your diagraph will end
How one can infer from the exact relevance of examples and analogies the resolution of one's ideolect.
Moral intuitions as a finite set of innate interpretations that are naturally and generatively triggered by complete description, and so morality as a requirement to solicit the information that would give one's moral intuitions the chance to be triggered. An argument for moral intuitions of greater informational content, rather than a difference in kind. Moral intuitions as judgements, propositional to the degree that any ordinary language.
Moral discourse doesn't required a shared vocabulary or theory.
Moral discourse is descriptive.  
How can you merge texts? 
  How can we reason about the individual who has read two texts?
Ellaborative encoding, using people's quotes as compositions of particular views.
One uses one's linguistic sense to navigate a diagraph.
Learning to read things for which you are not the target audience. 
The point is to create a standardized interface to represent interactions with things like books, search engines, and human teachers, to show how they satisfy the same sorts of requests functionally specified, and allow direct comparisons.


    To avoid thinking about topics that one knows they lack the means to determine the answer to -- eg judging political support of a war.

